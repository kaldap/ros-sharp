/*
Â© Cutter Systems spol. s r.o., 2018
Author: Petr Kalandra (kalandra@cutter.cz)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
<http://www.apache.org/licenses/LICENSE-2.0>.
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

using Newtonsoft.Json;
using System.Collections.Generic;
using RosSharp.RosBridgeClient.Messages.Standard;

namespace RosSharp.RosBridgeClient.Messages.Control
{
	public class FollowJointTrajectoryResult
	{
		[JsonIgnore]
		public const string RosMessageName = "control_msgs/FollowJointTrajectoryResult";

		// ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
		public int error_code;

		public int SUCCESSFUL;

		public int INVALID_GOAL;

		public int INVALID_JOINTS;

		public int OLD_HEADER_TIMESTAMP;

		public int PATH_TOLERANCE_VIOLATED;

		public int GOAL_TOLERANCE_VIOLATED;

		// Human readable description of the error code. Contains complementary
		// information that is especially useful when execution fails, for instance:
		// - INVALID_GOAL: The reason for the invalid goal (e.g., the requested
		//   trajectory is in the past).
		// - INVALID_JOINTS: The mismatch between the expected controller joints
		//   and those provided in the goal.
		// - PATH_TOLERANCE_VIOLATED and GOAL_TOLERANCE_VIOLATED: Which joint
		//   violated which tolerance, and by how much.
		public string error_string;


		public FollowJointTrajectoryResult()
		{
			error_string = string.Empty;
		}
	}
}
