/*
Â© Cutter Systems spol. s r.o., 2018
Author: Petr Kalandra (kalandra@cutter.cz)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
<http://www.apache.org/licenses/LICENSE-2.0>.
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

using Newtonsoft.Json;
using System.Collections.Generic;
using RosSharp.RosBridgeClient.Messages.Standard;

namespace RosSharp.RosBridgeClient.Messages.MoveIt
{
	public class PickupGoal
	{
		[JsonIgnore]
		public const string RosMessageName = "moveit_msgs/PickupGoal";

		// ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
		// An action for picking up an object
		// The name of the object to pick up (as known in the planning scene)
		public string target_name;

		// which group should be used to plan for pickup
		public string group_name;

		// which end-effector to be used for pickup (ideally descending from the group above)
		public string end_effector;

		// a list of possible grasps to be used. At least one grasp must be filled in
		public List<Grasp> possible_grasps;

		// the name that the support surface (e.g. table) has in the collision map
		// can be left empty if no name is available
		public string support_surface_name;

		// whether collisions between the gripper and the support surface should be acceptable
		// during move from pre-grasp to grasp and during lift. Collisions when moving to the
		// pre-grasp location are still not allowed even if this is set to true.
		public bool allow_gripper_support_collision;

		// The names of the links the object to be attached is allowed to touch;
		// If this is left empty, it defaults to the links in the used end-effector
		public List<string> attached_object_touch_links;

		// Optionally notify the pick action that it should approach the object further,
		// as much as possible (this minimizing the distance to the object before the grasp)
		// along the approach direction; Note: this option changes the grasping poses
		// supplied in possible_grasps[] such that they are closer to the object when possible.
		public bool minimize_object_distance;

		// Optional constraints to be imposed on every point in the motion plan
		public Constraints path_constraints;

		// The name of the motion planner to use. If no name is specified,
		// a default motion planner will be used
		public string planner_id;

		// an optional list of obstacles that we have semantic information about
		// and that can be touched/pushed/moved in the course of grasping;
		// CAREFUL: If the object name 'all' is used, collisions with all objects are disabled during the approach & lift.
		public List<string> allowed_touch_objects;

		// The maximum amount of time the motion planner is allowed to plan for
		public double allowed_planning_time;

		// Planning options
		public PlanningOptions planning_options;


		public PickupGoal()
		{
			target_name = string.Empty;
			group_name = string.Empty;
			end_effector = string.Empty;
			possible_grasps = new List<Grasp>();
			support_surface_name = string.Empty;
			allow_gripper_support_collision = new bool();
			attached_object_touch_links = new List<string>();
			minimize_object_distance = new bool();
			path_constraints = new Constraints();
			planner_id = string.Empty;
			allowed_touch_objects = new List<string>();
			planning_options = new PlanningOptions();
		}
	}
}
